%
\begin{itemize}
    \item $S_1$ လက်ကျန်ငွေ ၅ သိန်းရှိမယ်
    \item $K_1$ ဒီမှာလည်း ၅ သိန်းပဲ
    \item $K_2$ ဒီ \fEn{step} မှာ ကေသီ ငွေထုတ်လို့ ရ/မရ စစ်တယ်၊ ၄ သိန်းပဲ ထုတ်မှာဆိုတော့ ထုတ်လို့ရမယ် ($K_1$ အရ)
    \item $S_2$ ဒီ \fEn{step} မှာ စန္ဒီ ငွေထုတ် ရ/မရ စစ်တယ်၊ ၄ သိန်းပဲ ထုတ်မှာဆိုတော့ ထုတ်လို့ရရမယ် ($S_1$ အရ)
    \item $K_3$ ဒီ \fEn{step} ပြီးတဲ့အခါ ကေသီ ငွေထုတ်ပြီးသွားပြီ၊ လက်ကျန်ငွေ  \fEn{update} ဖြစ်သွားပြီး ၁ သိန်းဖြစ်နေပြီ (\fEn{concurrent} လုပ်ဆောင်နေတဲ့ စန္ဒီ့နဲ့ သက်ဆိုင်တဲ့ အပိုင်းက ဒါကိုမသိသေးဘူး၊ အောက်မှာ ဆက်ကြည့်ပါ)
    \item $S_3$ စန္ဒီ့အတွက် နောက်ဆုံး \fEn{step} မှာ  
\end{itemize}
%


ဒီဥပမာရဲ့ \fCode{INSERT} မှာပါတဲ့ \mintinline{text}|%s| တွေကို သတိပြုမိမှာပါ။ ပါရာမီတာ သတ်မှတ်တာ ဖြစ်ပါတယ်။ \fEn{SQL} \fEn{string} မှာ ပါရာမီတာပါရင် \fCode{execute} ဖန်ရှင် ခေါ်တဲ့အခါ \fEn{tuple} တစ်ခု ထည့်ပေးရပါမယ်။ အဲဒီ \fEn{tuple} ထဲမှာ \mintinline{text}|%s| တစ်ခုစီ နေရာမှာ အစားထိုးရမဲ့ တန်ဖိုးအသီးသီးကို အစဉ်အတိုင်း ထည့်ပေးရမှာဖြစ်ပြီး \fCode{execute} ဖန်ရှင်က ဒေတာဘေ့စ်ဆီကို \fEn{SQL} ပို့တဲ့အခါ ပါရာမီတာတွေနေရာမှာ သက်ဆိုင်ရာတန်ဖိုး အသီးအသီး အစားထိုးပေးမှာပါ။ ဥပမာ
%
\begin{py}
cur.execute("""
        INSERT INTO student (name, age, grade)
        VALUES (%s, %s, %s)
    """, ('Amy', 20, 'A'))
\end{py}
%
ကို လုပ်ဆောင်တဲ့အခါ ဒေတာဘေ့စ်ဆီ ပို့ပေးမဲ့ \fEn{SQL} က ဒီလိုဖြစ်သွားမှာပါ
% မှာ ပါရာမီတာတွေကို လိုက်ဖက်တန်ဖိုး အသီးသီးနဲ့ အစားထိုးပြီးရင် အခုလို ဖြစ်ပါမယ်။ ဒီ \fEn{SQL} ကို
%
\begin{sql}
INSERT INTO student (name, age, grade)
VALUES ('Amy', 20, 'A');
\end{sql}
%